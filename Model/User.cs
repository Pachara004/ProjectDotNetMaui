// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MiniprojectCross.Model;
//
//    var user = User.FromJson(jsonString);

namespace MiniprojectCross.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class User
    {
        [JsonProperty("student")]
        public Student Student { get; set; }

        [JsonProperty("currentSemester")]
        public CurrentSemester CurrentSemester { get; set; }

        [JsonProperty("previousSemesters")]
        public List<PreviousSemester> PreviousSemesters { get; set; }

        [JsonProperty("availableCourses")]
        public List<AvailableCourse> AvailableCourses { get; set; }
    }

    public partial class AvailableCourse
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("nameEng")]
        public string NameEng { get; set; }

        [JsonProperty("section")]
        public long Section { get; set; }

        [JsonProperty("credits")]
        public long Credits { get; set; }

        [JsonProperty("instructor")]
        public string Instructor { get; set; }

        [JsonProperty("availableSeats")]
        public long AvailableSeats { get; set; }

        [JsonProperty("maxSeats")]
        public long MaxSeats { get; set; }

        [JsonProperty("schedule")]
        public List<Schedule> Schedule { get; set; }

        [JsonProperty("midtermExam")]
        public string MidtermExam { get; set; }

        [JsonProperty("finalExam")]
        public string FinalExam { get; set; }

        [JsonProperty("prerequisite")]
        public List<string> Prerequisite { get; set; }
    }
    public partial class AvailableCourse
{
    // Convert AvailableCourse to CurrentSemesterSubject for registration
    public CurrentSemesterSubject ToCurrentSemesterSubject()
    {
        return new CurrentSemesterSubject
        {
            Id = Id,
            Name = Name,
            NameEng = NameEng,
            Section = Section,
            Credits = Credits,
            Instructor = Instructor,
            Schedule = Schedule,
            MidtermExam = MidtermExam,
            FinalExam = FinalExam,
            Status = "ลงทะเบียนแล้ว",
            Grade = null // Grade will be assigned after the semester ends
        };
    }

    // Computed property for schedule display
    public string ScheduleDisplay => Schedule != null && Schedule.Any()
        ? string.Join(", ", Schedule.Select(s => $"{s.Day} {s.Time} ({s.Room})"))
        : "N/A";
}
    public partial class Schedule
    {
        [JsonProperty("day")]
        public string Day { get; set; }

        [JsonProperty("time")]
        public string Time { get; set; }

        [JsonProperty("room")]
        public string Room { get; set; }
    }

    public partial class CurrentSemester
{
    [JsonProperty("academicYear")]
    public long AcademicYear { get; set; }

    [JsonProperty("term")]
    public long Term { get; set; }

    [JsonProperty("registrationStatus")]
    public string RegistrationStatus { get; set; }

    [JsonProperty("paymentStatus")]
    public string PaymentStatus { get; set; }

    [JsonProperty("registrationDate")]
    public DateTimeOffset RegistrationDate { get; set; }

    [JsonProperty("totalCredits")]
    public long TotalCredits { get; set; }

    [JsonProperty("totalFee")]
    public long TotalFee { get; set; }

    [JsonProperty("subjects")]
    public List<CurrentSemesterSubject> Subjects { get; set; }

    // Convert Gregorian year to Buddhist Era year
    public long DisplayAcademicYear => AcademicYear + 543;
}

    public partial class CurrentSemesterSubject
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("nameEng")]
        public string NameEng { get; set; }

        [JsonProperty("section")]
        public long Section { get; set; }

        [JsonProperty("credits")]
        public long Credits { get; set; }

        [JsonProperty("grade")]
        public object Grade { get; set; }

        [JsonProperty("instructor")]
        public string Instructor { get; set; }

        [JsonProperty("schedule")]
        public List<Schedule> Schedule { get; set; }

        [JsonProperty("midtermExam")]
        public string MidtermExam { get; set; }

        [JsonProperty("finalExam")]
        public string FinalExam { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }
    }

    public partial class PreviousSemester
    {
        [JsonProperty("academicYear")]
        public long AcademicYear { get; set; }

        [JsonProperty("term")]
        public long Term { get; set; }

        [JsonProperty("registrationStatus")]
        public string RegistrationStatus { get; set; }

        [JsonProperty("paymentStatus")]
        public string PaymentStatus { get; set; }

        [JsonProperty("registrationDate")]
        public string RegistrationDate { get; set; }

        [JsonProperty("totalCredits")]
        public long TotalCredits { get; set; }

        [JsonProperty("totalFee")]
        public long TotalFee { get; set; }

        [JsonProperty("gpa")]
        public double Gpa { get; set; }

        [JsonProperty("subjects")]
        public List<PreviousSemesterSubject> Subjects { get; set; }
        public long DisplayAcademicYear => AcademicYear + 543;
    }

    public partial class PreviousSemesterSubject
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("nameEng")]
        public string NameEng { get; set; }

        [JsonProperty("section")]
        public long Section { get; set; }

        [JsonProperty("credits")]
        public long Credits { get; set; }

        [JsonProperty("grade")]
        public string Grade { get; set; }

        [JsonProperty("instructor")]
        public string Instructor { get; set; }

        [JsonProperty("schedule")]
        public List<Schedule> Schedule { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }
    }

    public partial class Student
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("password")]
        public string Password { get; set; }

        [JsonProperty("profile")]
        public Profile Profile { get; set; }
    }

    public partial class Profile
    {
        [JsonProperty("firstname")]
        public string Firstname { get; set; }

        [JsonProperty("lastname")]
        public string Lastname { get; set; }

        [JsonProperty("nickname")]
        public string Nickname { get; set; }

        [JsonProperty("faculty")]
        public string Faculty { get; set; }

        [JsonProperty("department")]
        public string Department { get; set; }

        [JsonProperty("year")]
        public long Year { get; set; }

        [JsonProperty("advisor")]
        public string Advisor { get; set; }

        [JsonProperty("gpax")]
        public double Gpax { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("studentType")]
        public string StudentType { get; set; }

        [JsonProperty("entryYear")]
        public long EntryYear { get; set; }

        [JsonProperty("birthdate")]
        public string Birthdate { get; set; }

        [JsonProperty("phoneNumber")]
        public string PhoneNumber { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }
        

        [JsonProperty("profileImage")]
        public Uri ProfileImage { get; set; }
    }

    public partial class User
    {
        public static User FromJson(string json) => JsonConvert.DeserializeObject<User>(json, MiniprojectCross.Model.Converter.Settings);
        public static List<User> FromJsonList(string json) => JsonConvert.DeserializeObject<List<User>>(json, MiniprojectCross.Model.Converter.Settings);

    }

    public static class Serialize
    {
        public static string ToJson(this User self) => JsonConvert.SerializeObject(self, MiniprojectCross.Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
